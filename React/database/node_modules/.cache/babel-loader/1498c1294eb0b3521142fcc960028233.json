{"ast":null,"code":"var _jsxFileName = \"/home/ayush/github/development/React/database/src/App.js\";\nimport './App.css';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport AddMovie from './components/AddMovie';\nimport MoviesList from './components/MoviesList';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://react-91786-default-rtdb.firebaseio.com/movies.json');\n\n      if (!response.status === 200) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function addMovieHandler(movie) {\n    const response = await fetch('https://react-91786-default-rtdb.firebaseio.com/movies.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 16\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ayush/github/development/React/database/src/App.js"],"names":["React","useCallback","useEffect","useState","AddMovie","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","status","Error","data","json","loadedMovies","key","push","id","title","openingText","releaseDate","message","addMovieHandler","movie","method","body","JSON","stringify","headers","console","log","content","length"],"mappings":"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","sourcesContent":["import './App.css';\n\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport AddMovie from './components/AddMovie';\nimport MoviesList from './components/MoviesList';\n\nfunction App() {\n\tconst [movies, setMovies] = useState([]);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [error, setError] = useState(null);\n\n\tconst fetchMoviesHandler = useCallback(async () => {\n\t\tsetIsLoading(true);\n\t\tsetError(null);\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t'https://react-91786-default-rtdb.firebaseio.com/movies.json',\n\t\t\t);\n\t\t\tif (!response.status === 200) {\n\t\t\t\tthrow new Error('Something went wrong!');\n\t\t\t}\n\n\t\t\tconst data = await response.json();\n\t\t\tconst loadedMovies = [];\n\t\t\tfor (const key in data) {\n\t\t\t\tloadedMovies.push({\n\t\t\t\t\tid: key,\n\t\t\t\t\ttitle: data[key].title,\n\t\t\t\t\topeningText: data[key].openingText,\n\t\t\t\t\treleaseDate: data[key].releaseDate,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tsetMovies(loadedMovies);\n\t\t} catch (error) {\n\t\t\tsetError(error.message);\n\t\t}\n\t\tsetIsLoading(false);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tfetchMoviesHandler();\n\t}, [fetchMoviesHandler]);\n\n\tasync function addMovieHandler(movie) {\n\t\tconst response = await fetch(\n\t\t\t'https://react-91786-default-rtdb.firebaseio.com/movies.json',\n\t\t\t{\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: JSON.stringify(movie),\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tconst data = await response.json();\n\t\tconsole.log(data);\n\t}\n\n\tlet content = <p>Found no movies.</p>;\n\n\tif (movies.length > 0) {\n\t\tcontent = <MoviesList movies={movies} />;\n\t}\n\n\tif (error) {\n\t\tcontent = <p>{error}</p>;\n\t}\n\n\tif (isLoading) {\n\t\tcontent = <p>Loading...</p>;\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<section>\n\t\t\t\t<AddMovie onAddMovie={addMovieHandler} />\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<button onClick={fetchMoviesHandler}>Fetch Movies</button>\n\t\t\t</section>\n\t\t\t<section>{content}</section>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}