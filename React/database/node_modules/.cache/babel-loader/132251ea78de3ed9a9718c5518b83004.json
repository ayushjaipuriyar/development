{"ast":null,"code":"var _jsxFileName = \"/home/ayush/github/development/React/database/src/App.js\";\nimport \"./App.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport AddMovie from \"./components/AddMovie\";\nimport MoviesList from \"./components/MoviesList\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://react-91786-default-rtdb.firebaseio.com/movies.json\");\n\n      if (!response.status === 200) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function addMovieHandler(movie) {\n    const response = await fetch(\"https://react-91786-default-rtdb.firebaseio.com/movies.json\", {\n      method: \"POST\",\n      body: JSON.stringify(movie),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ayush/github/development/React/database/src/App.js"],"names":["React","useCallback","useEffect","useState","AddMovie","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","status","Error","data","json","loadedMovies","key","push","id","title","openingText","releaseDate","message","addMovieHandler","movie","method","body","JSON","stringify","headers","console","log","content","length"],"mappings":";AAAA,OAAO,WAAP;AAEA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAsD,OAAtD;AAEA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMU,kBAAkB,GAAGZ,WAAW,CAAC,YAAY;AACjDS,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CACxB,6DADwB,CAA5B;;AAEA,UAAI,CAACD,QAAQ,CAACE,MAAV,KAAqB,GAAzB,EAA8B;AAC5B,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,YAAMC,YAAY,GAAG,EAArB;;AACA,WAAK,MAAMC,GAAX,IAAkBH,IAAlB,EAAwB;AACtBE,QAAAA,YAAY,CAACE,IAAb,CAAkB;AAChBC,UAAAA,EAAE,EAAGF,GADW;AAEhBG,UAAAA,KAAK,EAAGN,IAAI,CAACG,GAAD,CAAJ,CAAUG,KAFF;AAGhBC,UAAAA,WAAW,EAAGP,IAAI,CAACG,GAAD,CAAJ,CAAUI,WAHR;AAIhBC,UAAAA,WAAW,EAAGR,IAAI,CAACG,GAAD,CAAJ,CAAUK;AAJR,SAAlB;AAOD;;AAEDlB,MAAAA,SAAS,CAACY,YAAD,CAAT;AACD,KApBD,CAoBE,OAAOT,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAACD,KAAK,CAACgB,OAAP,CAAR;AACD;;AACDjB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GA3BqC,EA2BnC,EA3BmC,CAAtC;AA6BAR,EAAAA,SAAS,CAAC,MAAM;AAAEW,IAAAA,kBAAkB;AAAK,GAAhC,EAAkC,CAAEA,kBAAF,CAAlC,CAAT;;AAEA,iBAAee,eAAf,CAA+BC,KAA/B,EAAsC;AACpC,UAAMf,QAAQ,GAAG,MAAMC,KAAK,CACxB,6DADwB,EACuC;AAC7De,MAAAA,MAAM,EAAG,MADoD;AAE7DC,MAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAFsD;AAG7DK,MAAAA,OAAO,EAAG;AACR,wBAAiB;AADT;AAHmD,KADvC,CAA5B;AAQA,UAAMhB,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYlB,IAAZ;AACD;;AAED,MAAImB,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAd;;AAGA,MAAI9B,MAAM,CAAC+B,MAAP,GAAgB,CAApB,EAAuB;AACrBD,IAAAA,OAAO,gBAAG,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE9B,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV;AACH;;AAED,MAAII,KAAJ,EAAW;AACT0B,IAAAA,OAAO,gBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI1B,KAAJ,CADJ;AAEC;;AAED,MAAIF,SAAJ,EAAe;AACb4B,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAV;AACH;;AAED,sBAAQ,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAChB,oBAAC,QAAD;AAAU,IAAA,UAAU,EAC1BT,eADM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADgB,CAAhB,eAGQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACR;AAAQ,IAAA,OAAO,EAAIf,kBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADQ,CAHR,eAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUwB,OAAV,CAPA,CAAR;AASa;;AAED,eAAe/B,GAAf","sourcesContent":["import \"./App.css\";\n\nimport React, {useCallback, useEffect, useState} from \"react\";\n\nimport AddMovie from \"./components/AddMovie\";\nimport MoviesList from \"./components/MoviesList\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n          \"https://react-91786-default-rtdb.firebaseio.com/movies.json\");\n      if (!response.status === 200) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const loadedMovies = [];\n      for (const key in data) {\n        loadedMovies.push({\n          id : key,\n          title : data[key].title,\n          openingText : data[key].openingText,\n          releaseDate : data[key].releaseDate,\n\n        })\n      }\n\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => { fetchMoviesHandler(); }, [ fetchMoviesHandler ]);\n\n  async function addMovieHandler(movie) {\n    const response = await fetch(\n        \"https://react-91786-default-rtdb.firebaseio.com/movies.json\", {\n          method : \"POST\",\n          body : JSON.stringify(movie),\n          headers : {\n            \"Content-Type\" : \"application/json\",\n          },\n        });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  let content = <p>Found no movies.<\n      /p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n}\n\nif (error) {\n  content =\n      <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n}\n\nreturn (<React.Fragment><section>\n        <AddMovie onAddMovie = {\n  addMovieHandler } />\n      </section><section>\n        <button onClick = {fetchMoviesHandler}>Fetch\n            Movies</button>\n      </section>\n        <section>{content}</section>\n    </React.Fragment>);\n            }\n\n            export default App;\n"]},"metadata":{},"sourceType":"module"}