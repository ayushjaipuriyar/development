{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: \"Cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    totalAmount: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const exsistingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!exsistingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        exsistingItem.quantity++;\n        exsistingItem.totalPrice = exsistingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const exsistingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (exsistingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        exsistingItem.quantity--;\n        exsistingItem.totalPrice = exsistingItem.totalPrice - exsistingItem.price;\n      }\n    }\n\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data!\"\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch(\"https://react-91786-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n\n      try {\n        await sendRequest();\n        dispatch(uiActions.showNotification({\n          status: \"success\",\n          title: \"Success!\",\n          message: \"Sent cart data successfully!\"\n        }));\n      } catch (error) {\n        dispatch(uiActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Sending cart data failed!\"\n        }));\n      }\n    };\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/home/ayush/github/development/React/advance-redux/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","totalAmount","reducers","addItemToCart","state","action","newItem","payload","exsistingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: \"Cart\",\n  initialState: { items: [], totalQuantity: 0, totalAmount: 0 },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const exsistingItem = state.items.find((item) => item.id === newItem.id);\n      state.totalQuantity++;\n      if (!exsistingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title,\n        });\n      } else {\n        exsistingItem.quantity++;\n        exsistingItem.totalPrice = exsistingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const exsistingItem = state.items.find((item) => item.id === id);\n      state.totalQuantity--;\n      if (exsistingItem.quantity === 1) {\n        state.items = state.items.filter((item) => item.id !== id);\n      } else {\n        exsistingItem.quantity--;\n        exsistingItem.totalPrice =\n          exsistingItem.totalPrice - exsistingItem.price;\n      }\n    },\n  },\n});\n\nexport const sendCartData = (cart) => {\n  return async (dispatch) => {\n    dispatch(\n      uiActions.showNotification({\n        status: \"pending\",\n        title: \"Sending...\",\n        message: \"Sending cart data!\",\n      })\n    );\n    const sendRequest = async () => {\n      const response = await fetch(\n        \"https://react-91786-default-rtdb.firebaseio.com/cart.json\",\n        {\n          method: \"PUT\",\n          body: JSON.stringify(cart),\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n      try {\n        await sendRequest();\n        dispatch(\n          uiActions.showNotification({\n            status: \"success\",\n            title: \"Success!\",\n            message: \"Sent cart data successfully!\",\n          })\n        );\n      } catch (error) {\n        dispatch(\n          uiActions.showNotification({\n            status: \"error\",\n            title: \"Error!\",\n            message: \"Sending cart data failed!\",\n          })\n        );\n      }\n    };\n  };\n};\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"]},"metadata":{},"sourceType":"module"}